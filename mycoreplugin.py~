from neutron.plugins.ml2 import plugin
from oslo_log import log
LOG = log.getLogger(__name__)
 
class CoreExtensionPlugin(plugin.Ml2Plugin):
 
    # List out all the extensions your plugin supports
    # append your extensions to Ml2 supported extensions
    
    supported_extension_aliases = ["provider", "external-net", "binding",
                                    "quotas", "security-group", "agent",
                                    "dhcp_agent_scheduler",
                                    "multi-provider", "allowed-address-pairs",
                                    "extra_dhcp_opt", "subnet_allocation",
                                    "net-mtu", "vlan-transparent", 'foxinsock']

    #self.supported_extension_aliases.append('foxinsock')
 
    # for extending methods not defined in Ml2Plugin
    def create_foxinsock(self, context, foxinsock):
 	LOG.info(_("called create_foxinsock"))
        # this need not be called using "super" as this method is
        # specific to this class and not Ml2Plugin
        # foxinsock contains the data you need for your plugin
        # to process

    def update_foxinsock(self, context, id, foxinsock):
	LOG.info(_("called update_foxinsock"))
        # The id is the unique identifier to your entry, foxinsock is a
        # dictionary with values that needs to be updated with.
 
    def get_foxinsock(self, context, id, fields):
	LOG.info(_("called get_foxinsock"))
        # The id is the unique identifier to your entry.
        # fields are the columns that you wish to display.
 
    def get_foxinsocks(self, context, filters, fields):
	LOG.info(_("called get_foxinsocks"))
        # Note there is an extra 's'.
        # filters contains the column name with a value with which
        # you can return multiple row entries that matches the filter
        # fields are the columns that you wish to display.
 
    def delete_foxinsock(self, context, id):
	LOG.info(_("called delete_foxinsock"))
        # The id is the unique identifier that can be used to delete
        # the row entry of your database.

    def _log_network_call(self, method_name, context):
        LOG.info(_("%(method)s called with network settings %(current)s "
                   "(original settings %(original)s) and "
                   "network segments %(segments)s"),
                 {'method': method_name,
                  'current': context.current,
                  'original': context.original,
                  'segments': context.network_segments})

    def create_network_precommit(self, context):
        self._log_network_call("create_network_precommit", context)

    def create_network_postcommit(self, context):
        self._log_network_call("create_network_postcommit", context)

    def update_network_precommit(self, context):
        self._log_network_call("update_network_precommit", context)

    def update_network_postcommit(self, context):
        self._log_network_call("update_network_postcommit", context)

    def delete_network_precommit(self, context):
        self._log_network_call("delete_network_precommit", context)

    def delete_network_postcommit(self, context):
        self._log_network_call("delete_network_postcommit", context)

    def _log_subnet_call(self, method_name, context):
        LOG.info(_("%(method)s called with subnet settings %(current)s "
                   "(original settings %(original)s)"),
                 {'method': method_name,
                  'current': context.current,
                  'original': context.original})

    def create_subnet_precommit(self, context):
        self._log_subnet_call("create_subnet_precommit", context)

    def create_subnet_postcommit(self, context):
        self._log_subnet_call("create_subnet_postcommit", context)

    def update_subnet_precommit(self, context):
        self._log_subnet_call("update_subnet_precommit", context)

    def update_subnet_postcommit(self, context):
        self._log_subnet_call("update_subnet_postcommit", context)

    def delete_subnet_precommit(self, context):
        self._log_subnet_call("delete_subnet_precommit", context)

    def delete_subnet_postcommit(self, context):
        self._log_subnet_call("delete_subnet_postcommit", context)

    def _log_port_call(self, method_name, context):
        network_context = context.network
        LOG.info(_("%(method)s called with port settings %(current)s "
                   "(original settings %(original)s) "
                   "host %(host)s "
                   "(original host %(original_host)s) "
                   "vif type %(vif_type)s "
                   "(original vif type %(original_vif_type)s) "
                   "vif details %(vif_details)s "
                   "(original vif details %(original_vif_details)s) "
                   "binding levels %(levels)s "
                   "(original binding levels %(original_levels)s) "
                   "on network %(network)s "
                   "with segments to bind %(segments_to_bind)s"),
                 {'method': method_name,
                  'current': context.current,
                  'original': context.original,
                  'host': context.host,
                  'original_host': context.original_host,
                  'vif_type': context.vif_type,
                  'original_vif_type': context.original_vif_type,
                  'vif_details': context.vif_details,
                  'original_vif_details': context.original_vif_details,
                  'levels': context.binding_levels,
                  'original_levels': context.original_binding_levels,
                  'network': network_context.current,
                  'segments_to_bind': context.segments_to_bind})

    def create_port_precommit(self, context):
        self._log_port_call("create_port_precommit", context)

    def create_port_postcommit(self, context):
        self._log_port_call("create_port_postcommit", context)

    def update_port_precommit(self, context):
        self._log_port_call("update_port_precommit", context)

    def update_port_postcommit(self, context):
        self._log_port_call("update_port_postcommit", context)

    def delete_port_precommit(self, context):
        self._log_port_call("delete_port_precommit", context)

    def delete_port_postcommit(self, context):
        self._log_port_call("delete_port_postcommit", context)

    def bind_port(self, context):
        self._log_port_call("bind_port", context)
